#!/usr/bin/env bash
# ---------------------------------------------------------------------------------------
# Description
# -----------
#
#
#  Script to handle bonita workspaces in the communitiy edition
#
# ---------------------------------------------------------------------------------------
# Author
# -------
#
#  * Farfanoide (https://github.com/farfanoide)
#
# ---------------------------------------------------------------------------------------

set -e

#===  COLORS AND CHARACTERS ====================================================
R=$(tput setaf 1)
G=$(tput setaf 2)
Y=$(tput setaf 3)
B=$(tput setaf 4)
TAB='  '
RESET=$(tput sgr0)

#===  BASIC CONFIGURATIONS CHECKS ==============================================

if [ -z $BONITA_INSTALL_DIR ]; then
    echo
    echo -e "${R}Can't work unless i know where Bonita BPM is installed"
    echo -e "Please set \$BONITA_INSTALL_DIR to point to this directory.${RESET}"
    echo
    exit 1
fi

#===  VARIABLE =================================================================
#         NAME:  ROOT_DIR
#  DESCRIPTION:  Represents the directory where the script is installed.
#===============================================================================
ROOT_DIR="$(dirname $(readlink ${BASH_SOURCE[*]}))/.."

#===  VARIABLE =================================================================
#         NAME:  BONITA_WS_DIR
#  DESCRIPTION:  Represents the directory where bonita holds workspaces.
#===============================================================================
BONITA_WS_DIR="${BONITA_INSTALL_DIR}/workspace"

#===  VARIABLE =================================================================
#         NAME:  BONITAWM_WS_DIR
#  DESCRIPTION:  Represents the directory where the script holds its workspaces.
#===============================================================================
[ -z $BONITAWM_WS_DIR ] && BONITAWM_WS_DIR="${ROOT_DIR}/workspaces"

#===  VARIABLE =================================================================
#         NAME:  EXAMPLE
#  DESCRIPTION:  Represents the default workspace file used to create new ones.
#===============================================================================
EXAMPLE="${ROOT_DIR}/default.tar.gz"

#===  VARIABLE =================================================================
#         NAME:  SCPT_NAME
#  DESCRIPTION:  Represents the name of the script
#===============================================================================
SCPT_NAME=$(basename $0)

#===  VARIABLE =================================================================
#         NAME:  SCPT_VERSION
#  DESCRIPTION:  Represents the version of the script
#===============================================================================
SCPT_VERSION="0.1"

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================
function usage()
{
  echo -e "Usage :  ${G}${SCPT_NAME}${RESET} COMMAND [args]\n"

  echo -e "Options:"
  echo -e "${TAB}${Y}-h|help          ${RESET}-- Display this message"
  echo -e "${TAB}${Y}-v|version       ${RESET}-- Display script version"
  echo -e "${TAB}${Y}-i|initialize    ${RESET}-- Enable workspace management"
  echo -e "${TAB}${Y}-l|list          ${RESET}-- List available workspaces"
  echo -e "${TAB}${Y}-n|new <name>    ${RESET}-- Create new workspace"
  echo -e "${TAB}${Y}-e|enable <name> ${RESET}-- Enable given workspace"
}

# Exit early if no arguments received
[ $# -eq 0 ] && usage && exit 1

#===  HELPER ===================================================================
#        NAME: _script_is_handling_workspaces
# DESCRIPTION: checks if the script is handling workspaces.
#===============================================================================
function _script_is_not_handling_workspaces()
{
    [ ! -h $BONITA_WS_DIR/default ]
}

#===  HELPER ===================================================================
#         NAME:  _workspace_exists
#  DESCRIPTION:  checks if a given workspace has alreaddy been created
#===============================================================================
function _workspace_exists()
{
    local ws_name=$1;

    [ -d "${BONITAWM_WS_DIR}/${ws_name}" ]
}

#===  HELPER ===================================================================
#         NAME:  _ws_is_enabled
#  DESCRIPTION:  checks if a given workspace is currently enabled
#===============================================================================
function _ws_is_enabled()
{
    local ws_name=$1;
    local currently_enabled=$(basename $(readlink $BONITA_WS_DIR/default))

    [ "${ws_name}" = "${currently_enabled}" ]
}

#===  FUNCTION  ================================================================
#         NAME:  new_workspace
#  DESCRIPTION:  create new bonita workspace
#===============================================================================
function new_workspace()
{
    local ws_name=$1

    [ -z $ws_name ] && echo -e "${R}Need a name for the new workspace.${RESET}" && exit 1

    if _workspace_exists $ws_name; then
      echo -e "${R}Workspace '${ws_name}' already exists." && exit 1
    fi

    mkdir "${BONITAWM_WS_DIR}/${ws_name}"
    tar -xzf $EXAMPLE -C "${BONITAWM_WS_DIR}/${ws_name}"

    echo -e "${G}Workspace '${ws_name}' successfully created.${RESET}"
}


#===  FUNCTION  ================================================================
#         NAME:  enable_workspace
#  DESCRIPTION:  enable given bonita workspace
#===============================================================================
function enable_workspace()
{
    local ws_name=$1

    [ -z $ws_name ] && echo -e "${R}Need a workspace to enable${RESET}" && exit 1

    if _script_is_not_handling_workspaces; then
        echo -e "${R}Need to initialize script first${RESET}" &&  exit 1;
    fi

    if _workspace_exists $ws_name; then
        # First, let's remove old symlink
        rm "${BONITA_WS_DIR}/default"

        # Now we can enable the requested workspace
        ln -s "${BONITAWM_WS_DIR}/${ws_name}" "${BONITA_WS_DIR}/default"

        echo -e "${G}Workspace '${ws_name}' successfully enabled.${RESET}"
    else
        echo -e "${R}Workspace not available.${RESET}" && exit 1
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  list_workspaces
#  DESCRIPTION:  Lists available workspaces.
#===============================================================================
function list_workspaces()
{
    local workspaces=$(ls -1 $BONITAWM_WS_DIR)

    for ws in ${workspaces[*]}; do
      echo -e $ws $(_ws_is_enabled $ws && echo "${G}(enabled)${RESET}")
    done
}

#===  FUNCTION  ================================================================
#         NAME:  initialize_workspace_management
#  DESCRIPTION:  Initializes workspace management.
#                This means the script will start handling workspaces for bonita.
#===============================================================================
function initialize_workspace_management()
{
    if [ ! -h "${BONITA_WS_DIR}/default" ]; then
        # This means default workspace is still in place so we should
        # back it up and re-enable it.

        echo -e "${B}Backing up default workspace in case you had anything done ;)${RESET}"
        mv "${BONITA_WS_DIR}/default" "${BONITAWM_WS_DIR}/default"

        echo -e "${B}Enabling default workspace${RESET}"
        ln -s "${BONITAWM_WS_DIR}/default" "${BONITA_WS_DIR}/default"
    else
        echo -e "${G}Workspace management seems to be already initialized.${RESET}"
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  print_version
#  DESCRIPTION:  Prints script version
#===============================================================================
function print_version()
{
    echo "${G}${SCPT_NAME}${RESET} -- Version ${SCPT_VERSION}"
}

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

while getopts ":hviln:e:" opt; do
    case $opt in

        h|help      ) usage; exit 0 ;;

        v|version   ) print_version; exit 0 ;;

        i|initialize) initialize_workspace_management ;;

        l|list      ) list_workspaces && exit 0 ;;

        n|new       ) new_workspace $OPTARG ;;

        e|enable    ) enable_workspace $OPTARG ;;

        * )  echo -e "Option '${OPTARG}' does not exist or requires arguments"; usage; exit 1 ;;

    esac
done
